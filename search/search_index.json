{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Contramate Documentation","text":"<p>Welcome to Contramate - a powerful contract analysis and metadata extraction platform powered by AI agents and intelligent document processing.</p>"},{"location":"#overview","title":"Overview","text":"<p>Contramate is designed to help organizations analyze, extract insights from, and interact with contract documents at scale. Using advanced LLM-powered agents and structured metadata extraction, Contramate makes contract analysis fast, accurate, and intuitive.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#ai-powered-agents","title":"\ud83e\udd16 AI-Powered Agents","text":"<ul> <li>Contract Metadata Insight Agent: SQL-based agent for querying structured contract metadata</li> <li>Talk to Contract Agent: Vector-powered semantic search across contract content</li> <li>Query Rewriter: Contextualizes queries with conversation history</li> <li>Clarifier Agent: Interactive query clarification for ambiguous requests</li> <li>Answer Critique: Validates answer completeness and quality</li> </ul>"},{"location":"#structured-metadata-extraction","title":"\ud83d\udcca Structured Metadata Extraction","text":"<ul> <li>Application Structured Metadata (ASMD): 60+ clause-level fields including non-compete, IP ownership, termination clauses</li> <li>Extracted Structured Metadata (ESMD): 30+ financial and operational fields including contract values, payment terms, deliverables</li> </ul>"},{"location":"#dual-query-modes","title":"\ud83d\udd0d Dual Query Modes","text":"<ul> <li>Metadata Queries: Fast SQL-based queries across structured contract data</li> <li>Semantic Search: Deep document analysis using vector embeddings and OpenSearch</li> </ul>"},{"location":"#safety-guardrails","title":"\ud83d\udee1\ufe0f Safety &amp; Guardrails","text":"<ul> <li>Query validation and guardrails to prevent unsafe operations</li> <li>Automatic filter application based on context</li> <li>Token tracking and usage monitoring</li> <li>Comprehensive error handling and retry logic</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>graph TD\n    A[User Query] --&gt; B{Query Router}\n    B --&gt;|Metadata Query| C[Contract Metadata Insight Agent]\n    B --&gt;|Semantic Query| D[Talk to Contract Agent]\n\n    C --&gt; E[PostgreSQL]\n    E --&gt; F[contract_asmd]\n    E --&gt; G[contracting_esmd]\n\n    D --&gt; H[OpenSearch]\n    H --&gt; I[Vector Search]\n\n    C --&gt; J[LLM: SQL Generation]\n    D --&gt; K[LLM: Answer Generation]\n\n    J --&gt; L[Response with Citations]\n    K --&gt; L\n\n    L --&gt; M[Answer Critique Agent]\n    M --&gt; N[Validated Response]</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code># Clone the repository\ngit clone https://github.com/MrDataPsycho/contra.mate.git\ncd contra.mate\n\n# Install dependencies with uv\nuv sync\n\n# Set up environment variables\ncp .envs/local.env.example .envs/local.env\n# Edit .envs/local.env with your configuration\n\n# Start infrastructure with Docker Compose\ndocker compose up -d\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from contramate.core.agents.contract_metadata_insight import (\n    ContractMetadataInsightAgentFactory\n)\n\n# Create agent\nagent = ContractMetadataInsightAgentFactory.create_default()\n\n# Query contracts\nresult = await agent.run(\"How many contracts have non-compete clauses?\")\n\nprint(result[\"answer\"])\nprint(result[\"citations\"])\n</code></pre>"},{"location":"#data-pipeline","title":"Data Pipeline","text":"<p>Contramate processes contracts through multiple stages:</p> <ol> <li>Bronze Layer: Raw contract PDFs and text files</li> <li>Silver Layer: Extracted and cleaned text with metadata</li> <li>Gold Layer: Structured ASMD data (clause analysis)</li> <li>Platinum Layer: Enhanced ESMD data (financial/operational extraction)</li> </ol>"},{"location":"#agent-system","title":"Agent System","text":""},{"location":"#metadata-query-flow","title":"Metadata Query Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Agent\n    participant LLM\n    participant DB\n\n    User-&gt;&gt;Agent: Natural language query\n    Agent-&gt;&gt;Agent: Validate query\n    Agent-&gt;&gt;LLM: Generate SQL\n    LLM-&gt;&gt;Agent: SQL query + explanation\n    Agent-&gt;&gt;Agent: Apply guardrails\n    Agent-&gt;&gt;DB: Execute SQL\n    DB-&gt;&gt;Agent: Query results\n    Agent-&gt;&gt;LLM: Format results\n    LLM-&gt;&gt;Agent: Natural language answer + citations\n    Agent-&gt;&gt;User: Response with citations</code></pre>"},{"location":"#technology-stack","title":"Technology Stack","text":"<ul> <li>Python 3.12+: Core language</li> <li>OpenAI API: LLM for agent intelligence</li> <li>PostgreSQL: Structured metadata storage</li> <li>OpenSearch: Vector search and document retrieval</li> <li>DynamoDB: Conversation history storage</li> <li>FastAPI: API backend</li> <li>Next.js: Frontend interface</li> <li>Docker: Containerization and deployment</li> </ul>"},{"location":"#key-concepts","title":"Key Concepts","text":""},{"location":"#citations","title":"Citations","text":"<p>All agent responses include citations that reference the data source:</p> <pre><code>{\n  \"answer\": \"Found 45 contracts with non-compete clauses [doc1].\",\n  \"citations\": {\n    \"doc1\": \"Database: contract_asmd table (Application Structured Metadata)\"\n  }\n}\n</code></pre>"},{"location":"#query-guardrails","title":"Query Guardrails","text":"<p>The system enforces strict safety rules:</p> <ul> <li>\u2705 Only SELECT queries allowed</li> <li>\u2705 All queries must include WHERE or LIMIT clauses</li> <li>\u2705 Maximum LIMIT of 1000 rows</li> <li>\u274c No INSERT, UPDATE, DELETE, DROP operations</li> <li>\u274c No queries that could pull entire tables</li> </ul>"},{"location":"#filters","title":"Filters","text":"<p>Agents intelligently apply filters based on query context:</p> <ul> <li>Project-specific queries automatically filter by <code>project_id</code></li> <li>Contract-specific queries filter by <code>reference_doc_id</code></li> <li>Type-specific queries filter by <code>contract_type</code></li> </ul>"},{"location":"#example-queries","title":"Example Queries","text":""},{"location":"#metadata-queries","title":"Metadata Queries","text":"<pre><code># Count contracts by type\n\"How many Service Agreements do we have?\"\n\n# Analyze clauses\n\"Show me contracts with both non-compete and IP ownership clauses\"\n\n# Financial analysis (with ESMD)\n\"What's the average contract value for Development Agreements?\"\n\n# Join queries\n\"Find contracts with termination clauses that also have payment schedules\"\n</code></pre>"},{"location":"#semantic-queries","title":"Semantic Queries","text":"<pre><code># Content search\n\"What are the termination conditions in this contract?\"\n\n# Multi-document analysis\n\"Compare payment terms across all Service Agreements\"\n\n# Specific clause extraction\n\"Extract all confidentiality obligations from contracts with Microsoft\"\n</code></pre>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Installation Guide - Detailed setup instructions</li> <li>Quick Start Tutorial - Step-by-step guide</li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>\ud83d\udcd6 Documentation</li> <li>\ud83d\udc1b Issue Tracker</li> <li>\ud83d\udcac Discussions</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"presentation/","title":"Contramate: Demo Day","text":"<p>Sheikh Alam | Agent Engineering Bootcamp Capstone</p>"},{"location":"presentation/#1-introduction","title":"1. Introduction","text":"Component Description What AI-powered contract analysis assistant using LLMs, multi-agent systems, and vector search Purpose Automate contract Q&amp;A, analysis, and comparison with citation-backed responses Tech Focus Multi-agent orchestration, RAG architecture, full-stack deployment"},{"location":"presentation/#key-capabilities","title":"Key Capabilities","text":"Feature Capability \ud83d\udd0d Natural Language Queries Ask questions in plain English \ud83d\udcca Multi-Document Analysis Compare provisions across contracts \ud83d\udccc Source Citations Every answer backed by document references \ud83d\udcac Conversation Memory Context-aware follow-up questions \u26a1 Real-Time Search Instant retrieval from 500+ contracts"},{"location":"presentation/#2-problem-manual-contract-review-challenges","title":"2. Problem: Manual Contract Review Challenges","text":"Challenge Impact Time Cost Time-Intensive Review 50-70% of legal team time on manual review Hours per contract Information Fragmentation Key terms scattered across documents Difficult comparisons Human Error Overlooked clauses, inconsistent interpretation Quality risks <p>4. Collaboration Bottlenecks - Contract knowledge locked in individual experts - Difficult to onboard new team members - No audit trail for question-answer history</p> <p>5. Scalability Issues - Cannot keep pace with growing contract volumes - Expensive to hire additional legal staff - No automated way to extract insights at scale</p>"},{"location":"presentation/#3-solution-what-contramate-automates","title":"3. Solution: What Contramate Automates","text":""},{"location":"presentation/#automated-contract-intelligence","title":"Automated Contract Intelligence","text":"<p>1. Instant Question Answering</p>"},{"location":"presentation/#3-solution-contramate-ai-system","title":"3. Solution: Contramate AI System","text":"Feature Before After Impact Contract Search Manual 100+ page review Natural language Q&amp;A Hours \u2192 Minutes Multi-Doc Analysis Open multiple PDFs manually Automatic comparison 10+ contracts in seconds Search Quality Keyword-only (60% accuracy) Hybrid semantic + keyword 95%+ accuracy Verification No source tracking Citations <code>[doc1]</code> inline Full auditability Context Repeat info each query Conversation memory Natural dialogue Filtering Search all (noisy) Project/doc filtering 80% less noise"},{"location":"presentation/#4-system-architecture-multi-agent-design","title":"4. System Architecture: Multi-Agent Design","text":""},{"location":"presentation/#agent-orchestration-flow","title":"Agent Orchestration Flow","text":"<pre><code>graph TD\n    A[USER INTERFACE&lt;br/&gt;Streamlit UI / Next.js Frontend] --&gt; B[FASTAPI BACKEND&lt;br/&gt;Chat Controller REST API]\n    B --&gt; C[ORCHESTRATOR AGENT Main]\n    C --&gt; |\"Receives query + history + filters\"| C\n    C --&gt; D[Query Rewriter Agent]\n    C --&gt; E[Tool Executor Agent]\n    C --&gt; F[Answer Critique Agent]\n\n    E --&gt; G[Talk to Contract Agent&lt;br/&gt;Production: Vanilla]\n\n    G --&gt; H[TOOL LAYER]\n    H --&gt; |hybrid_search| H\n    H --&gt; |search_by_project| H\n    H --&gt; |search_by_document| H\n    H --&gt; |compare_filtered_documents| H\n    H --&gt; |search_similar_documents| H\n\n    H --&gt; I[(OpenSearch&lt;br/&gt;Vector DB)]\n    H --&gt; J[(PostgreSQL&lt;br/&gt;Metadata)]\n    H --&gt; K[(DynamoDB&lt;br/&gt;Messages)]\n\n    style A fill:#e1f5ff\n    style B fill:#fff4e6\n    style C fill:#f3e5f5\n    style D fill:#e8f5e9\n    style E fill:#e8f5e9\n    style F fill:#e8f5e9\n    style G fill:#fff9c4\n    style H fill:#fce4ec\n    style I fill:#e0f2f1\n    style J fill:#e0f2f1\n    style K fill:#e0f2f1</code></pre>"},{"location":"presentation/#agent-roles","title":"Agent Roles","text":"Agent Responsibility Orchestrator Entry point, manages flow, delegates tasks, aggregates response Query Rewriter Contextualizes queries with history, expands ambiguous questions Tool Executor Selects tools via function calling, executes searches Talk To Contract Core Q&amp;A engine, hybrid search, citation generation, retry logic Answer Critique Evaluates quality, suggests improvements, validates citations"},{"location":"presentation/#5-document-processing-workflow","title":"5. Document Processing Workflow","text":""},{"location":"presentation/#end-to-end-data-pipeline","title":"End-to-End Data Pipeline","text":"<pre><code>graph TB\n    A[\"1. DOCUMENT INGESTION&lt;br/&gt;\u2022 PDF contracts uploaded&lt;br/&gt;\u2022 Metadata extraction&lt;br/&gt;\u2022 Stored in PostgreSQL\"] \n    B[\"2. TEXT EXTRACTION&lt;br/&gt;\u2022 PDFs to markdown&lt;br/&gt;\u2022 Preserve structure&lt;br/&gt;\u2022 Store full text\"]\n    C[\"3. CHUNKING &amp; EMBEDDING&lt;br/&gt;\u2022 Semantic chunks ~500 tokens&lt;br/&gt;\u2022 text-embedding-3-small&lt;br/&gt;\u2022 Vector dimension: 1536\"]\n    D[\"4. VECTOR DATABASE INDEXING&lt;br/&gt;\u2022 Index in OpenSearch&lt;br/&gt;\u2022 embedding + text + metadata&lt;br/&gt;\u2022 Enable kNN + BM25\"]\n    E[\"5. QUERY PROCESSING&lt;br/&gt;\u2022 User query \u2192 embedding&lt;br/&gt;\u2022 Hybrid: 70% semantic + 30% keyword&lt;br/&gt;\u2022 Apply filters&lt;br/&gt;\u2022 Top-k chunks\"]\n    F[\"6. LLM ANSWER GENERATION&lt;br/&gt;\u2022 Context: chunks + history&lt;br/&gt;\u2022 GPT-4 generates answer&lt;br/&gt;\u2022 Citations mapped&lt;br/&gt;\u2022 Validation with retry\"]\n    G[\"7. CONVERSATION PERSISTENCE&lt;br/&gt;\u2022 Save to DynamoDB&lt;br/&gt;\u2022 User &amp; assistant messages&lt;br/&gt;\u2022 Response time, citations&lt;br/&gt;\u2022 PK: USER# SK: MSG#\"]\n\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\n    D --&gt; E\n    E --&gt; F\n    F --&gt; G\n\n    style A fill:#e3f2fd\n    style B fill:#f3e5f5\n    style C fill:#fff9c4\n    style D fill:#e8f5e9\n    style E fill:#fce4ec\n    style F fill:#fff4e6\n    style G fill:#e0f2f1</code></pre>"},{"location":"presentation/#6-technology-stack","title":"6. Technology Stack","text":""},{"location":"presentation/#backend-technologies","title":"Backend Technologies","text":"<p>Core Framework - Python 3.12 - Main programming language - FastAPI - High-performance REST API framework - Uvicorn - ASGI server with async support</p>"},{"location":"presentation/#technology-stack-summary","title":"Technology Stack Summary","text":"Layer Technologies Backend FastAPI, Pydantic, neopipe (Result types), aioboto3, loguru AI/ML OpenAI GPT-4, text-embedding-3-small, Tenacity retry, pydantic-ai Search OpenSearch 2.11.1, kNN + BM25 hybrid, OpenSearch Dashboards Databases PostgreSQL 15 (SQLModel ORM), DynamoDB Local Frontend Streamlit 1.40 (current), Next.js 15 + TypeScript + Tailwind v4 (future) Package Mgmt uv (Python), pnpm (Node.js) Infrastructure Docker Compose, Clean Architecture (API \u2192 Services \u2192 Adapters \u2192 Agents) Ports FastAPI:8000, Streamlit:8501, Postgres:5432, Dynamo:8001, OpenSearch:9200"},{"location":"presentation/#production-readiness-assessment","title":"Production Readiness Assessment","text":"Category Score Priority Security &amp; Authentication 3/10 \ud83d\udd34 HIGH Error Handling &amp; Logging 6/10 \ud83d\udfe1 MEDIUM Performance &amp; Scalability 5/10 \ud83d\udd34 HIGH Testing &amp; QA 4/10 \ud83d\udd34 HIGH Monitoring &amp; Observability 2/10 \ud83d\udfe1 MEDIUM Data Management &amp; Backup 4/10 \ud83d\udd34 HIGH API Design &amp; Documentation 7/10 \ud83d\udfe2 LOW Deployment &amp; Infrastructure 5/10 \ud83d\udfe1 MEDIUM User Experience &amp; Frontend 6/10 \ud83d\udfe1 MEDIUM Compliance &amp; Privacy 2/10 \ud83d\udd34 HIGH <p>Status: Prototype/MVP Ready \u2705 | Production Ready: \u274c (6-9 months hardening needed)</p>"},{"location":"presentation/#8-demonstration-flow","title":"8. Demonstration Flow","text":"Step Action Details 1. Select Document User picks \"HealthGate Hosting Agreement\" Filters stored, metadata fetched from PostgreSQL 2. Initial Query \"What are the payment terms?\" Query embedded \u2192 Hybrid search \u2192 Top 5 chunks retrieved 3. LLM Response Payment terms listed with citations <code>[doc1]</code> citations mapped, Response time: 7.03s 4. Follow-Up \"What happens if payment is late?\" History provides context, retrieves penalty clauses 5. Comparison \"Compare payment terms between contracts\" <code>compare_filtered_documents</code> tool, side-by-side results"},{"location":"presentation/#9-challenges-overcome","title":"9. Challenges Overcome","text":""},{"location":"presentation/#technical-problem-solving","title":"Technical Problem-Solving","text":"Challenge Issue Solution Result Pydantic-AI Bug Citation validation failed with history: <code>{\"doc1\": 1}</code> instead of <code>{\"doc1\": \"file.pdf\"}</code> Vanilla OpenAI client with manual JSON validation 100% reliability (vs 30%)"},{"location":"presentation/#10-results-impact","title":"10. Results &amp; Impact","text":""},{"location":"presentation/#quantitative-outcomes","title":"Quantitative Outcomes","text":"Metric Before After Improvement Review Time 2-4 hours 5-10 min 95% \u2193 Multi-Doc Compare 30+ min 30 sec 98% \u2193 Accuracy 60% (keyword) 95% (hybrid) +35% Citations Manual lookup Auto-generated 100% coverage Knowledge Expert-dependent Persistent history Always available"},{"location":"presentation/#qualitative-benefits","title":"Qualitative Benefits","text":"Stakeholder Benefits Legal Teams Instant contract knowledge, citation confidence, reduced cognitive load Organizations Democratized knowledge, audit trails, scalable without linear costs Developers Multi-agent design patterns, RAG architecture, LLM reliability techniques"},{"location":"presentation/#11-future-roadmap","title":"11. Future Roadmap","text":"Phase Timeline Features Advanced Analytics Q1 2025 Risk scoring, anomaly detection, portfolio dashboard Document Generation Q2 2025 Auto-summaries, term extraction, template population Multi-Language Q3 2025 Translation layer, multilingual embeddings, cross-language comparison Enterprise Q4 2025 RBAC, SSO (OAuth/SAML), audit logging, rate limiting Advanced AI 2026+ Fine-tuned legal models, graph relationships, predictive analytics"},{"location":"presentation/#12-lessons-learned","title":"12. Lessons Learned","text":"Lesson Insight Validate LLM Outputs Non-deterministic failures require retry logic with exponential backoff Hybrid Search Wins kNN + BM25 (70/30 split) outperforms semantic-only search History Management Conversational context critical but can break structured outputs Citation Trust Source attribution non-negotiable; validate to prevent hallucinations Clean Architecture Result types, factories, layer separation enable rapid iteration Docker Deployment <code>docker-compose up</code> simplifies multi-service orchestration UX Details Response time, context visibility, expandable sections build trust"},{"location":"presentation/#13-conclusion","title":"13. Conclusion","text":""},{"location":"presentation/#key-achievements","title":"Key Achievements","text":"Metric Result Time Reduction 95% (hours \u2192 minutes) Search Accuracy 95%+ (vs 60% keyword-only) Contracts Indexed 500+ documents Architecture Multi-agent orchestration + RAG + Clean Architecture Status MVP Ready \u2705, Enterprise: 6-9 months"},{"location":"presentation/#impact","title":"Impact","text":"<p>Contramate proves AI-powered contract management is transformative, combining multi-agent systems, hybrid vector search, citation-backed responses, and production-ready engineering to deliver a deployable solution that showcases technical depth, real-world applicability, and full-stack expertise.</p>"},{"location":"presentation/#thank-you","title":"Thank You","text":""},{"location":"presentation/#contact-resources","title":"Contact &amp; Resources","text":"Resource Link GitHub Repository github.com/MrDataPsycho/contra.mate LinkedIn linkedin.com/in/sheikh-alam-data Documentation mrdatapsycho.github.io/contra.mate <p>Presented at Agent Engineering Bootcamp Capstone Day Date: 2025-10-24 Technology: Multi-Agent AI Systems | RAG | Vector Databases</p>"},{"location":"components/agents/contract-metadata-insight/","title":"Contract Metadata Insight Agent","text":"<p>The Contract Metadata Insight Agent is a SQL-based agent that transforms natural language questions into SQL queries and executes them against structured contract metadata tables.</p>"},{"location":"components/agents/contract-metadata-insight/#overview","title":"Overview","text":"<p>This agent provides fast, accurate answers to questions about contract metadata by:</p> <ol> <li>Converting natural language queries to SQL</li> <li>Executing queries against PostgreSQL tables</li> <li>Formatting results with citations</li> <li>Enforcing safety guardrails</li> </ol>"},{"location":"components/agents/contract-metadata-insight/#key-features","title":"Key Features","text":"<ul> <li>\u2705 Natural Language to SQL: Automatically generates SQL from questions</li> <li>\u2705 Dual Table Support: Queries both ASMD (clause data) and ESMD (financial data)</li> <li>\u2705 Smart Joins: Handles LEFT JOIN for missing ESMD data</li> <li>\u2705 Query Guardrails: Enforces WHERE/LIMIT requirements</li> <li>\u2705 Citation Tracking: Every answer includes source references</li> <li>\u2705 Token Management: Tracks usage across iterations</li> </ul>"},{"location":"components/agents/contract-metadata-insight/#database-schema","title":"Database Schema","text":""},{"location":"components/agents/contract-metadata-insight/#contract-asmd-application-structured-metadata","title":"Contract ASMD (Application Structured Metadata)","text":"<p>60+ fields including:</p> <ul> <li><code>project_id</code>, <code>reference_doc_id</code>: Composite primary key</li> <li><code>document_title</code>, <code>contract_type</code>: Basic metadata</li> <li><code>parties_answer</code>: Contract parties</li> <li><code>agreement_date_answer</code>: Effective date</li> <li><code>non_compete_answer</code>: Yes/No for non-compete clauses</li> <li><code>ip_ownership_assignment_answer</code>: IP ownership provisions</li> <li><code>termination_for_convenience_answer</code>: Termination clauses</li> <li>And 50+ more clause-level fields...</li> </ul>"},{"location":"components/agents/contract-metadata-insight/#contract-esmd-extracted-structured-metadata","title":"Contract ESMD (Extracted Structured Metadata)","text":"<p>30+ fields including:</p> <ul> <li><code>project_id</code>, <code>reference_doc_id</code>: Foreign key to ASMD</li> <li><code>total_contract_value</code>: Financial value</li> <li><code>payment_schedule</code>: Payment terms</li> <li><code>deliverables_activities</code>: Work description</li> <li><code>effective_date</code>, <code>termination_date</code>: Contract timeline</li> <li>And 25+ more financial/operational fields...</li> </ul>"},{"location":"components/agents/contract-metadata-insight/#usage","title":"Usage","text":""},{"location":"components/agents/contract-metadata-insight/#basic-usage","title":"Basic Usage","text":"<pre><code>import asyncio\nfrom contramate.core.agents.contract_metadata_insight import (\n    ContractMetadataInsightAgentFactory\n)\n\nasync def main():\n    # Create agent with default settings\n    agent = ContractMetadataInsightAgentFactory.create_default()\n\n    # Run query\n    result = await agent.run(\"How many contracts have non-compete clauses?\")\n\n    print(result[\"answer\"])\n    print(result[\"citations\"])\n\nasyncio.run(main())\n</code></pre>"},{"location":"components/agents/contract-metadata-insight/#with-custom-model","title":"With Custom Model","text":"<pre><code># Use a different model\nagent = ContractMetadataInsightAgentFactory.create_default(\n    model=\"gpt-4\",\n    max_iterations=10\n)\n\nresult = await agent.run(\"Complex query requiring more tokens...\")\n</code></pre>"},{"location":"components/agents/contract-metadata-insight/#with-filters","title":"With Filters","text":"<pre><code># Apply filters for scoped queries\nfilters = {\n    \"project_id\": \"abc-123\",\n    \"contract_type\": \"Service Agreement\"\n}\n\nresult = await agent.run(\n    \"How many contracts are there?\",\n    filters=filters\n)\n</code></pre>"},{"location":"components/agents/contract-metadata-insight/#query-examples","title":"Query Examples","text":""},{"location":"components/agents/contract-metadata-insight/#counting-and-aggregation","title":"Counting and Aggregation","text":"<pre><code># Basic count\n\"How many contracts are in the database?\"\n\n# Count by type\n\"How many Service Agreements do we have?\"\n\n# Group by\n\"Show me contract counts by type\"\n\n# Aggregation\n\"What's the average number of clauses per contract?\"\n</code></pre>"},{"location":"components/agents/contract-metadata-insight/#clause-analysis","title":"Clause Analysis","text":"<pre><code># Single clause\n\"How many contracts have non-compete clauses?\"\n\n# Multiple clauses\n\"Find contracts with both IP ownership and termination clauses\"\n\n# Clause breakdown\n\"Show me non-compete clauses grouped by contract type\"\n\n# Percentage analysis\n\"What percentage of contracts have arbitration clauses?\"\n</code></pre>"},{"location":"components/agents/contract-metadata-insight/#financial-queries-esmd","title":"Financial Queries (ESMD)","text":"<pre><code># Value analysis\n\"What's the total value of all Service Agreements?\"\n\n# Average values\n\"What's the average contract value by type?\"\n\n# Payment terms\n\"Show me contracts with milestone-based payment schedules\"\n\n# Date analysis\n\"How many contracts were signed in 2023?\"\n</code></pre>"},{"location":"components/agents/contract-metadata-insight/#join-queries-asmd-esmd","title":"Join Queries (ASMD + ESMD)","text":"<pre><code># Combined analysis\n\"Show me contracts with non-compete clauses and contract values over $1M\"\n\n# Missing data\n\"How many contracts have clause data but no financial data?\"\n\n# Comprehensive view\n\"Give me a summary of Development Agreements with all available data\"\n</code></pre>"},{"location":"components/agents/contract-metadata-insight/#response-format","title":"Response Format","text":"<p>Every response includes:</p> <pre><code>{\n    \"success\": True,\n    \"answer\": \"Found 45 contracts with non-compete clauses [doc1]...\",\n    \"citations\": {\n        \"doc1\": \"Database: contract_asmd table (Application Structured Metadata)\"\n    }\n}\n</code></pre>"},{"location":"components/agents/contract-metadata-insight/#citation-formats","title":"Citation Formats","text":"<p>ASMD Only: <pre><code>\"doc1\": \"Database: contract_asmd table (Application Structured Metadata - clause analysis)\"\n</code></pre></p> <p>ESMD Only: <pre><code>\"doc1\": \"Database: contracting_esmd table (Extracted Structured Metadata - financial analysis)\"\n</code></pre></p> <p>Join Query: <pre><code>\"doc1\": \"Database: contract_asmd and contracting_esmd tables (combined clause and financial analysis)\"\n</code></pre></p>"},{"location":"components/agents/contract-metadata-insight/#query-guardrails","title":"Query Guardrails","text":""},{"location":"components/agents/contract-metadata-insight/#required-rules","title":"Required Rules","text":"<p>All queries MUST include either:</p> <ul> <li><code>WHERE</code> clause (to filter results)</li> <li><code>LIMIT</code> clause (to cap results)</li> <li>Both (recommended best practice)</li> </ul>"},{"location":"components/agents/contract-metadata-insight/#enforced-restrictions","title":"Enforced Restrictions","text":"<p>\u274c Blocked: <pre><code>-- No WHERE or LIMIT\nSELECT * FROM contract_asmd\n\n-- Dangerous operations\nDELETE FROM contract_asmd\nUPDATE contract_asmd SET ...\nDROP TABLE contract_asmd\n</code></pre></p> <p>\u2705 Allowed: <pre><code>-- With LIMIT\nSELECT * FROM contract_asmd LIMIT 100\n\n-- With WHERE\nSELECT * FROM contract_asmd WHERE contract_type = 'Service'\n\n-- With both (best practice)\nSELECT * FROM contract_asmd \nWHERE contract_type = 'Service' \nLIMIT 10\n</code></pre></p>"},{"location":"components/agents/contract-metadata-insight/#maximum-limits","title":"Maximum Limits","text":"<ul> <li><code>LIMIT</code> must be \u2264 1000 rows</li> <li>Queries returning &gt;1000 rows will be capped</li> </ul>"},{"location":"components/agents/contract-metadata-insight/#configuration","title":"Configuration","text":""},{"location":"components/agents/contract-metadata-insight/#model-settings","title":"Model Settings","text":"<p>Configured via environment variables in <code>.envs/local.env</code>:</p> <pre><code>OPENAI_MODEL=gpt-4.1-mini\nOPENAI_TEMPERATURE=0.0\nOPENAI_SEED=42\nOPENAI_MAX_TOKENS=4096\n</code></pre>"},{"location":"components/agents/contract-metadata-insight/#database-settings","title":"Database Settings","text":"<pre><code>POSTGRES_HOST=localhost\nPOSTGRES_PORT=5432\nPOSTGRES_DATABASE=cuad\nPOSTGRES_USER=cuad_user\nPOSTGRES_PASSWORD=cuad_password\n</code></pre>"},{"location":"components/agents/contract-metadata-insight/#advanced-features","title":"Advanced Features","text":""},{"location":"components/agents/contract-metadata-insight/#token-tracking","title":"Token Tracking","text":"<p>The agent tracks token usage across iterations:</p> <pre><code>result = await agent.run(\"Complex query...\")\n\n# Token info is logged automatically\n# Prompt tokens: 4729\n# Completion tokens: 48\n# Total tokens: 4777\n</code></pre>"},{"location":"components/agents/contract-metadata-insight/#retry-logic","title":"Retry Logic","text":"<p>Built-in retry with exponential backoff for resilience.</p>"},{"location":"components/agents/contract-metadata-insight/#error-handling","title":"Error Handling","text":"<p>Comprehensive error handling:</p> <ul> <li>SQL syntax errors</li> <li>Connection failures</li> <li>Query timeout</li> <li>Response validation errors</li> </ul>"},{"location":"components/agents/contract-metadata-insight/#best-practices","title":"Best Practices","text":""},{"location":"components/agents/contract-metadata-insight/#1-always-use-where-limit","title":"1. Always Use WHERE + LIMIT","text":"<pre><code># Good\n\"Show me 10 Service Agreements with non-compete clauses\"\n\n# Better - more specific\n\"Show me Service Agreements signed in 2023 with non-compete clauses, limit 10\"\n</code></pre>"},{"location":"components/agents/contract-metadata-insight/#2-be-specific-about-time-ranges","title":"2. Be Specific About Time Ranges","text":"<pre><code># Vague\n\"Show me recent contracts\"\n\n# Specific\n\"Show me contracts signed in the last 6 months\"\n</code></pre>"},{"location":"components/agents/contract-metadata-insight/#3-request-aggregates-for-large-datasets","title":"3. Request Aggregates for Large Datasets","text":"<pre><code># Instead of listing all\n\"Show me all contracts with IP clauses\"\n\n# Use aggregation\n\"How many contracts have IP clauses, grouped by type\"\n</code></pre>"},{"location":"components/agents/contract-metadata-insight/#4-use-join-queries-carefully","title":"4. Use JOIN Queries Carefully","text":"<pre><code># Check if ESMD data exists first\n\"How many contracts have both clause and financial data?\"\n\n# Then query specifics\n\"Show me those contracts with values over $500K\"\n</code></pre>"},{"location":"components/agents/contract-metadata-insight/#troubleshooting","title":"Troubleshooting","text":""},{"location":"components/agents/contract-metadata-insight/#query-blocked-errors","title":"Query Blocked Errors","text":"<p>If you see \"Query blocked\" errors:</p> <pre><code># Problem\nresult = await agent.run(\"Show me all contracts\")\n\n# Solution\nresult = await agent.run(\"Show me 100 contracts\")\n# or\nresult = await agent.run(\"Show me contracts of type Service\")\n</code></pre>"},{"location":"components/agents/contract-metadata-insight/#no-results","title":"No Results","text":"<p>Check your filters:</p> <pre><code># Wrong contract type name\nfilters = {\"contract_type\": \"Service Agreement\"}  # Doesn't exist\n\n# Correct\nfilters = {\"contract_type\": \"Service\"}  # Exists in DB\n</code></pre>"},{"location":"components/agents/contract-metadata-insight/#timeout-errors","title":"Timeout Errors","text":"<p>For complex queries:</p> <pre><code># Increase max iterations\nagent = ContractMetadataInsightAgentFactory.create_default(\n    max_iterations=10  # Default is 5\n)\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide will walk you through setting up Contramate on your local machine or server.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing Contramate, ensure you have the following:</p> <ul> <li>Python 3.12+ installed</li> <li>Docker and Docker Compose (for infrastructure services)</li> <li>Git for cloning the repository</li> <li>uv package manager (recommended) or pip</li> <li>OpenAI API Key (for LLM functionality)</li> </ul>"},{"location":"getting-started/installation/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<pre><code>git clone https://github.com/MrDataPsycho/contra.mate.git\ncd contra.mate\n</code></pre>"},{"location":"getting-started/installation/#step-2-install-uv-if-not-already-installed","title":"Step 2: Install uv (if not already installed)","text":"<pre><code># macOS/Linux\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Windows (PowerShell)\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre>"},{"location":"getting-started/installation/#step-3-install-python-dependencies","title":"Step 3: Install Python Dependencies","text":"<pre><code># Using uv (recommended)\nuv sync\n\n# Or using pip\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#step-4-configure-environment-variables","title":"Step 4: Configure Environment Variables","text":"<p>Copy the example environment file and configure it:</p> <pre><code>cp .envs/local.env.example .envs/local.env\n</code></pre> <p>Edit <code>.envs/local.env</code> with your configuration:</p> <pre><code># OpenAI Configuration\nOPENAI_API_KEY=sk-your-api-key-here\nOPENAI_MODEL=gpt-4.1-mini\nOPENAI_EMBEDDING_MODEL=text-embedding-3-small\nOPENAI_TEMPERATURE=0.0\nOPENAI_MAX_TOKENS=4096\nOPENAI_SEED=42\n\n# PostgreSQL Configuration\nPOSTGRES_HOST=localhost\nPOSTGRES_PORT=5432\nPOSTGRES_DATABASE=cuad\nPOSTGRES_USER=cuad_user\nPOSTGRES_PASSWORD=cuad_password\n\n# OpenSearch Configuration\nOPENSEARCH_HOST=localhost\nOPENSEARCH_PORT=9200\nOPENSEARCH_USE_SSL=false\nOPENSEARCH_VERIFY_CERTS=false\nOPENSEARCH_INDEX_NAME=contracts-test\n\n# DynamoDB Configuration\nDYNAMODB_ENDPOINT_URL=http://localhost:8001\nDYNAMODB_REGION=us-east-1\nDYNAMODB_ACCESS_KEY_ID=dummy\nDYNAMODB_SECRET_ACCESS_KEY=dummy\nDYNAMODB_TABLE_NAME=ConversationTable\n\n# Application Configuration\nAPP_NAME=Contramate\nAPP_ENVIRONMENT=local\nAPP_DEBUG=true\nAPP_HOST=0.0.0.0\nAPP_PORT=8000\nAPP_VECTOR_DIMENSION=1536\nAPP_DEFAULT_INDEX_NAME=contracts-test\nAPP_LLM_PROVIDER=openai\n\n# Agent Toggle Settings\nAGENT_ENABLE_CLARIFIER_AGENT=true\nAGENT_ENABLE_QUERY_REWRITER_AGENT=true\nAGENT_ENABLE_ANSWER_CRITIQUE_AGENT=true\n</code></pre>"},{"location":"getting-started/installation/#step-5-start-infrastructure-services","title":"Step 5: Start Infrastructure Services","text":"<p>Start PostgreSQL, OpenSearch, and DynamoDB using Docker Compose:</p> <pre><code>docker compose up -d\n</code></pre> <p>Verify services are running:</p> <pre><code>docker compose ps\n</code></pre> <p>You should see: - PostgreSQL on port 5432 - OpenSearch on port 9200 - DynamoDB on port 8001</p>"},{"location":"getting-started/installation/#step-6-initialize-database","title":"Step 6: Initialize Database","text":"<p>Run database migrations and create tables:</p> <pre><code># Create DynamoDB table\nuv run python scripts/create_dynamodb_table.py\n\n# PostgreSQL tables are automatically created by SQLModel\n</code></pre>"},{"location":"getting-started/installation/#step-7-load-sample-data-optional","title":"Step 7: Load Sample Data (Optional)","text":"<p>If you have the CUAD dataset, load it into the database:</p> <pre><code># Extract contracts to bronze layer\n# (Place your contract files in data/bronze/)\n\n# Run data pipeline\n# (Custom pipeline scripts based on your data format)\n</code></pre>"},{"location":"getting-started/installation/#step-8-verify-installation","title":"Step 8: Verify Installation","text":"<p>Test that everything is working:</p> <pre><code># Run basic tests\nuv run python scripts/test_metadata_insight_agent.py\n\n# Start the API server\nuv run uvicorn contramate.api.main:app --reload\n</code></pre> <p>Visit <code>http://localhost:8000/docs</code> to see the API documentation.</p>"},{"location":"getting-started/installation/#optional-frontend-setup","title":"Optional: Frontend Setup","text":"<p>If you want to run the Next.js frontend:</p> <pre><code>cd frontend\n\n# Install dependencies\npnpm install\n\n# Start development server\npnpm dev\n</code></pre> <p>Visit <code>http://localhost:3000</code> to access the web interface.</p>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#docker-services-not-starting","title":"Docker Services Not Starting","text":"<pre><code># Check logs\ndocker compose logs\n\n# Restart services\ndocker compose down\ndocker compose up -d\n</code></pre>"},{"location":"getting-started/installation/#postgresql-connection-issues","title":"PostgreSQL Connection Issues","text":"<p>Ensure PostgreSQL is accessible:</p> <pre><code># Test connection\npsql -h localhost -p 5432 -U cuad_user -d cuad\n</code></pre>"},{"location":"getting-started/installation/#opensearch-not-responding","title":"OpenSearch Not Responding","text":"<pre><code># Check OpenSearch health\ncurl http://localhost:9200/_cluster/health\n\n# View logs\ndocker compose logs opensearch\n</code></pre>"},{"location":"getting-started/installation/#import-errors","title":"Import Errors","text":"<pre><code># Reinstall dependencies\nuv sync --force\n\n# Verify Python version\npython --version  # Should be 3.12+\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide - Learn basic usage</li> </ul>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>For development with additional tools:</p> <pre><code># Install with development dependencies\nuv sync --all-extras\n\n# Install pre-commit hooks\npre-commit install\n\n# Run tests\npytest tests/\n</code></pre>"},{"location":"getting-started/installation/#docker-only-installation","title":"Docker-Only Installation","text":"<p>To run everything in Docker:</p> <pre><code># Build and start all services\ndocker compose up -d --build\n\n# Access the API\ncurl http://localhost:8000/health\n</code></pre> <p>This will start: - Backend API (port 8000) - Frontend UI (port 3000) - PostgreSQL (port 5432) - OpenSearch (port 9200) - DynamoDB (port 8001)</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>Get started with Contramate in minutes! This guide will walk you through your first queries and demonstrate the core functionality.</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<p>Make sure you've completed the Installation Guide and have:</p> <ul> <li>\u2705 Infrastructure services running (Docker Compose)</li> <li>\u2705 Environment variables configured</li> <li>\u2705 Dependencies installed</li> </ul>"},{"location":"getting-started/quickstart/#your-first-query","title":"Your First Query","text":"<p>Let's start with a simple metadata query using the Contract Metadata Insight Agent.</p>"},{"location":"getting-started/quickstart/#1-create-the-agent","title":"1. Create the Agent","text":"<pre><code>import asyncio\nfrom contramate.core.agents.contract_metadata_insight import (\n    ContractMetadataInsightAgentFactory\n)\n\n# Create agent with default settings\nagent = ContractMetadataInsightAgentFactory.create_default()\n</code></pre>"},{"location":"getting-started/quickstart/#2-run-a-basic-query","title":"2. Run a Basic Query","text":"<pre><code>async def run_query():\n    # Ask a question about contracts\n    result = await agent.run(\"How many contracts are in the database?\")\n\n    # Print the answer\n    print(\"Answer:\", result[\"answer\"])\n    print(\"\\nCitations:\", result[\"citations\"])\n\n    return result\n\n# Run the query\nresult = asyncio.run(run_query())\n</code></pre> <p>Expected Output: <pre><code>Answer: There are a total of 510 contracts in the database [doc1].\n\nCitations: {'doc1': 'Database: contract_asmd table (Application Structured Metadata)'}\n</code></pre></p>"},{"location":"getting-started/quickstart/#common-query-patterns","title":"Common Query Patterns","text":""},{"location":"getting-started/quickstart/#contract-type-analysis","title":"Contract Type Analysis","text":"<pre><code>async def analyze_contract_types():\n    agent = ContractMetadataInsightAgentFactory.create_default()\n\n    result = await agent.run(\n        \"What are the different types of contracts and how many of each?\"\n    )\n\n    print(result[\"answer\"])\n\nasyncio.run(analyze_contract_types())\n</code></pre>"},{"location":"getting-started/quickstart/#clause-analysis","title":"Clause Analysis","text":"<pre><code>async def analyze_clauses():\n    agent = ContractMetadataInsightAgentFactory.create_default()\n\n    result = await agent.run(\n        \"How many contracts have non-compete clauses? \"\n        \"Show me the breakdown by contract type.\"\n    )\n\n    print(result[\"answer\"])\n\nasyncio.run(analyze_clauses())\n</code></pre>"},{"location":"getting-started/quickstart/#financial-analysis-with-esmd","title":"Financial Analysis (with ESMD)","text":"<pre><code>async def analyze_financials():\n    agent = ContractMetadataInsightAgentFactory.create_default()\n\n    result = await agent.run(\n        \"Show me contracts with non-compete clauses that also have \"\n        \"total contract values. What's the average value?\"\n    )\n\n    print(result[\"answer\"])\n\nasyncio.run(analyze_financials())\n</code></pre>"},{"location":"getting-started/quickstart/#using-filters","title":"Using Filters","text":"<p>You can pass filters to narrow down queries:</p> <pre><code>async def query_with_filters():\n    agent = ContractMetadataInsightAgentFactory.create_default()\n\n    # Filter by contract type\n    filters = {\"contract_type\": \"Service Agreement\"}\n\n    result = await agent.run(\n        \"How many contracts are there?\",\n        filters=filters\n    )\n\n    print(result[\"answer\"])\n\nasyncio.run(query_with_filters())\n</code></pre>"},{"location":"getting-started/quickstart/#semantic-search-with-talk-to-contract","title":"Semantic Search with Talk to Contract","text":"<p>For document content analysis, use the Talk to Contract agent:</p> <pre><code>from contramate.core.agents.talk_to_contract import TalkToContractAgent\n\nasync def semantic_search():\n    # This requires OpenSearch with indexed contracts\n    agent = TalkToContractAgent.create_default()\n\n    result = await agent.run(\n        \"What are the termination conditions in Service Agreements?\"\n    )\n\n    print(result[\"answer\"])\n    print(\"\\nSources:\")\n    for key, source in result[\"citations\"].items():\n        print(f\"  {key}: {source}\")\n\nasyncio.run(semantic_search())\n</code></pre>"},{"location":"getting-started/quickstart/#complete-example-script","title":"Complete Example Script","text":"<p>Save this as <code>quickstart_example.py</code>:</p> <pre><code>\"\"\"\nContramate Quick Start Example\nDemonstrates basic usage of the Contract Metadata Insight Agent\n\"\"\"\n\nimport asyncio\nfrom loguru import logger\nfrom contramate.core.agents.contract_metadata_insight import (\n    ContractMetadataInsightAgentFactory\n)\n\n\nasync def run_examples():\n    \"\"\"Run a series of example queries.\"\"\"\n\n    # Create agent\n    logger.info(\"Creating Contract Metadata Insight Agent...\")\n    agent = ContractMetadataInsightAgentFactory.create_default()\n\n    # Example 1: Basic count\n    logger.info(\"\\n\" + \"=\"*80)\n    logger.info(\"Example 1: Basic Contract Count\")\n    logger.info(\"=\"*80)\n    result = await agent.run(\"How many contracts are in the database?\")\n    print(f\"\\n{result['answer']}\\n\")\n\n    # Example 2: Contract types\n    logger.info(\"\\n\" + \"=\"*80)\n    logger.info(\"Example 2: Contract Type Distribution\")\n    logger.info(\"=\"*80)\n    result = await agent.run(\n        \"What are the top 5 most common contract types?\"\n    )\n    print(f\"\\n{result['answer']}\\n\")\n\n    # Example 3: Clause analysis\n    logger.info(\"\\n\" + \"=\"*80)\n    logger.info(\"Example 3: Non-Compete Clause Analysis\")\n    logger.info(\"=\"*80)\n    result = await agent.run(\n        \"How many contracts have non-compete clauses? \"\n        \"Show the top 3 contract types.\"\n    )\n    print(f\"\\n{result['answer']}\\n\")\n\n    # Example 4: Join query\n    logger.info(\"\\n\" + \"=\"*80)\n    logger.info(\"Example 4: ASMD + ESMD Join\")\n    logger.info(\"=\"*80)\n    result = await agent.run(\n        \"How many contracts have both clause data and financial data?\"\n    )\n    print(f\"\\n{result['answer']}\\n\")\n\n    logger.success(\"\u2705 All examples completed!\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(run_examples())\n</code></pre> <p>Run it:</p> <pre><code>uv run python quickstart_example.py\n</code></pre>"},{"location":"getting-started/quickstart/#understanding-the-response","title":"Understanding the Response","text":"<p>Every agent response includes:</p>"},{"location":"getting-started/quickstart/#1-success-status","title":"1. Success Status","text":"<pre><code>result[\"success\"]  # True or False\n</code></pre>"},{"location":"getting-started/quickstart/#2-answer-with-citations","title":"2. Answer with Citations","text":"<pre><code>result[\"answer\"]  # Natural language answer with [doc1], [doc2] markers\n</code></pre>"},{"location":"getting-started/quickstart/#3-citation-sources","title":"3. Citation Sources","text":"<pre><code>result[\"citations\"]  # Dictionary mapping doc1, doc2, etc. to sources\n</code></pre> <p>Example: <pre><code>{\n  \"success\": true,\n  \"answer\": \"Found 45 contracts with non-compete clauses [doc1].\",\n  \"citations\": {\n    \"doc1\": \"Database: contract_asmd table (Application Structured Metadata)\"\n  }\n}\n</code></pre></p>"},{"location":"getting-started/quickstart/#query-safety-and-guardrails","title":"Query Safety and Guardrails","text":"<p>The system enforces strict safety rules:</p>"},{"location":"getting-started/quickstart/#allowed-queries","title":"\u2705 Allowed Queries","text":"<pre><code># Queries with LIMIT\n\"SELECT * FROM contract_asmd LIMIT 100\"\n\n# Queries with WHERE\n\"SELECT * FROM contract_asmd WHERE contract_type = 'Service'\"\n\n# Queries with both (best practice)\n\"SELECT * FROM contract_asmd WHERE contract_type = 'Service' LIMIT 10\"\n</code></pre>"},{"location":"getting-started/quickstart/#blocked-queries","title":"\u274c Blocked Queries","text":"<p>The LLM will automatically add WHERE or LIMIT clauses, but if it doesn't:</p> <pre><code># No WHERE or LIMIT - will be rejected\n\"SELECT * FROM contract_asmd\"\n\n# Dangerous operations - not possible\n\"DELETE FROM contract_asmd\"\n\"UPDATE contract_asmd SET ...\"\n\"DROP TABLE contract_asmd\"\n</code></pre>"},{"location":"getting-started/quickstart/#tips-for-effective-queries","title":"Tips for Effective Queries","text":""},{"location":"getting-started/quickstart/#1-be-specific","title":"1. Be Specific","text":"<p>\u274c \"Tell me about contracts\" \u2705 \"How many Service Agreements have termination clauses?\"</p>"},{"location":"getting-started/quickstart/#2-use-natural-language","title":"2. Use Natural Language","text":"<p>The agent understands context:</p> <pre><code>\"Show me contracts from Microsoft with IP ownership clauses\"\n\"What's the average contract value for Distributor agreements?\"\n\"Find contracts signed in 2023 with non-compete provisions\"\n</code></pre>"},{"location":"getting-started/quickstart/#3-ask-for-breakdowns","title":"3. Ask for Breakdowns","text":"<pre><code>\"Show me the breakdown by contract type\"\n\"Group by year and show trends\"\n\"What percentage have this clause?\"\n</code></pre>"},{"location":"getting-started/quickstart/#4-combine-filters","title":"4. Combine Filters","text":"<pre><code>\"Find Service Agreements with both termination AND arbitration clauses\"\n\"Show contracts with IP ownership OR licensing provisions\"\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you understand the basics, explore more:</p> <ul> <li>Installation Guide - Full installation details</li> <li>Contract Metadata Insight Agent - Deep dive into the agent</li> </ul>"},{"location":"getting-started/quickstart/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quickstart/#no-module-named-contramate","title":"\"No module named 'contramate'\"","text":"<pre><code># Reinstall in development mode\nuv sync\n</code></pre>"},{"location":"getting-started/quickstart/#connection-refused-errors","title":"\"Connection refused\" errors","text":"<pre><code># Ensure Docker services are running\ndocker compose ps\ndocker compose up -d\n</code></pre>"},{"location":"getting-started/quickstart/#query-blocked-errors","title":"\"Query blocked\" errors","text":"<p>Check that your query includes WHERE or LIMIT:</p> <pre><code># This will be blocked\nresult = await agent.run(\"SELECT everything from contracts\")\n\n# This will work\nresult = await agent.run(\"Show me 10 contracts\")\n</code></pre>"},{"location":"getting-started/quickstart/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Full Documentation</li> <li>\ud83d\udc1b Report Issues</li> <li>\ud83d\udcac Ask Questions</li> </ul>"}]}